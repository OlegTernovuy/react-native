// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Occcupation List component should matches snapshot 1`] = `
<View
  style={
    {
      "marginTop": 16,
      "width": "100%",
    }
  }
>
  <RCTScrollView
    contentContainerStyle={
      {
        "columnGap": 8,
      }
    }
    data={
      [
        "Development",
        "Testing",
        "Engineering",
      ]
    }
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={true}
    initialNumToRender={5}
    keyExtractor={[Function]}
    maxToRenderPerBatch={10}
    onContentSizeChange={[Function]}
    onLayout={[Function]}
    onMomentumScrollBegin={[Function]}
    onMomentumScrollEnd={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    removeClippedSubviews={true}
    renderItem={[Function]}
    scrollEventThrottle={0.0001}
    stickyHeaderIndices={[]}
    testID="occup-flat-list"
    viewabilityConfigCallbackPairs={[]}
  >
    <View>
      <View
        onFocusCapture={[Function]}
        onLayout={[Function]}
        style={
          [
            {
              "flexDirection": "row",
            },
            null,
          ]
        }
      >
        <View
          accessibilityState={
            {
              "busy": undefined,
              "checked": undefined,
              "disabled": undefined,
              "expanded": undefined,
              "selected": undefined,
            }
          }
          accessibilityValue={
            {
              "max": undefined,
              "min": undefined,
              "now": undefined,
              "text": undefined,
            }
          }
          accessible={true}
          collapsable={false}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            {
              "backgroundColor": "#f1f1f1cc",
              "borderBottomLeftRadius": 16,
              "borderBottomRightRadius": 16,
              "borderColor": "black",
              "borderStyle": "solid",
              "borderTopLeftRadius": 16,
              "borderTopRightRadius": 16,
              "borderWidth": 1,
              "opacity": 1,
              "paddingBottom": 4,
              "paddingLeft": 8,
              "paddingRight": 8,
              "paddingTop": 4,
            }
          }
        >
          <Text>
            Development
          </Text>
        </View>
      </View>
      <View
        onFocusCapture={[Function]}
        onLayout={[Function]}
        style={
          [
            {
              "flexDirection": "row",
            },
            null,
          ]
        }
      >
        <View
          accessibilityState={
            {
              "busy": undefined,
              "checked": undefined,
              "disabled": undefined,
              "expanded": undefined,
              "selected": undefined,
            }
          }
          accessibilityValue={
            {
              "max": undefined,
              "min": undefined,
              "now": undefined,
              "text": undefined,
            }
          }
          accessible={true}
          collapsable={false}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            {
              "backgroundColor": "#f1f1f1cc",
              "borderBottomLeftRadius": 16,
              "borderBottomRightRadius": 16,
              "borderColor": "black",
              "borderStyle": "solid",
              "borderTopLeftRadius": 16,
              "borderTopRightRadius": 16,
              "borderWidth": 1,
              "opacity": 1,
              "paddingBottom": 4,
              "paddingLeft": 8,
              "paddingRight": 8,
              "paddingTop": 4,
            }
          }
        >
          <Text>
            Testing
          </Text>
        </View>
      </View>
      <View
        onFocusCapture={[Function]}
        onLayout={[Function]}
        style={
          [
            {
              "flexDirection": "row",
            },
            null,
          ]
        }
      >
        <View
          accessibilityState={
            {
              "busy": undefined,
              "checked": undefined,
              "disabled": undefined,
              "expanded": undefined,
              "selected": undefined,
            }
          }
          accessibilityValue={
            {
              "max": undefined,
              "min": undefined,
              "now": undefined,
              "text": undefined,
            }
          }
          accessible={true}
          collapsable={false}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            {
              "backgroundColor": "#f1f1f1cc",
              "borderBottomLeftRadius": 16,
              "borderBottomRightRadius": 16,
              "borderColor": "black",
              "borderStyle": "solid",
              "borderTopLeftRadius": 16,
              "borderTopRightRadius": 16,
              "borderWidth": 1,
              "opacity": 1,
              "paddingBottom": 4,
              "paddingLeft": 8,
              "paddingRight": 8,
              "paddingTop": 4,
            }
          }
        >
          <Text>
            Engineering
          </Text>
        </View>
      </View>
    </View>
  </RCTScrollView>
</View>
`;
